* Table of Contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#links][Links]]
- [[#install][Install]]
- [[#create-docker-target-environment][Create docker target environment]]
  - [[#ubuntu-environment][Ubuntu environment]]
  - [[#fedora-environment][Fedora environment]]
- [[#ad-hoc-commands][Ad-hoc commands]]
- [[#module-documentation][Module documentation]]
- [[#config][Config]]
  - [[#ansiblecfg][~ansible.cfg~]]
  - [[#inventory-format][Inventory format]]
#+END_QUOTE

* Links

- https://www.jeffgeerling.com/blog/2020/ansible-101-jeff-geerling-youtube-streaming-series

* Install

#+BEGIN_SRC bash :noeval
# For fedora
sudo dnf install ansible

# For osx
brew install ansible

# Verify install
ansible --version
#+END_SRC

* Create docker target environment

** Ubuntu environment

#+BEGIN_SRC bash :noeval
cd dockerenv/ubuntu
ssh-keygen -b 4096 -t rsa -f ./id_rsa -N ""
docker build -t ubuntuansibletarget:latest .

# Start env. I use --init because it seems to respect ctrl-c when I want to exit
docker run --rm -p 1022:22 --init ubuntuansibletarget:latest

# Test connection
ssh -o "IdentitiesOnly=yes" -i id_rsa -p 1022 ansibleuser@localhost
#+END_SRC

** Fedora environment

#+BEGIN_SRC bash :noeval
cd dockerenv/fedora
ssh-keygen -b 4096 -t rsa -f ./id_rsa -N ""
docker build -t fedoraansibletarget:latest .

# Start env. I use --init because it seems to respect ctrl-c when I want to exit
docker run --rm -p 2022:22 --init fedoraansibletarget:latest

# Test connection
ssh -o "IdentitiesOnly=yes" -i id_rsa -p 2022 ansibleuser@localhost
#+END_SRC

* Ad-hoc commands

#+BEGIN_SRC bash :noeval
ansible -i inventory example -m ping -u centos
ansible -i inventory example -m ping -u ansibleuser --key-file ../../dockerenv/id_rsa

# If we add the key in the inventory file we can omit the key
ansible -i inventory example -m ping -u ansibleuser

# We can even add the user to the inventory file
ansible -i inventory example -m ping

# With an ansible.cfg file we can point to our inventory file and then
# we can omit the -i option as well
ansible ubuntu-server -m ping

# -m is for module
ansible ubuntu-server -m ping

# default for -m is "command" and -a feeds the module arguments
ansible ubuntu-server -a "ls -la"
ansible ubuntu-server -a "date"

ansible multi -a "hostname"

# Control parallellism with -f (default set to 5)
ansible multi -a "hostname" -f 1

# Return everything that ansible can find about a server. Something called "gather facts"
ansible multi -m setup

# Become a different user with -b/--become (default "sudo")
ansible multi -b -a "whoami"

# Install a package
ansible multi -b -m yum -a "name=ntp state=present"

# Check that the service is runnnig / enable the service 
ansible multi -b -m service -a "name=ntpd state=started enabled=yes"

# The --limit command can focus on a single server instead of the whole group
#TODO

# Background tasks -B -P
ansible multi -b -B 3600 -P 0 -a "yum -y update"
# Look at ansible_job_id and results_file field
ansible multi -b -m async_status -a <ansible_job_id>

# This won't work as the command module doesn't handle pipes and redirections etc.
ansible multi -b -a "tail /var/log/messages | grep ansible-command | wc -l"

# Use shell module instead (but should be avoided)
ansible multi -b -m shell -a "tail /var/log/messages | grep ansible-command | wc -l"
#+END_SRC

Ansible is idempotent. If we run it more than one time it will still yield the
same result. The ~command~ module will always run anyway and report a ~CHANGED~
status as ansible don't know what has been done. When using other ansible
modules, ansible can know if something was updated or not.

#+BEGIN_SRC yaml
---
- name: Set up NTP on all servers.
  hosts: all
  become: yes # Run as sudo
  tasks:
    - name: Ensure NTP is installed.
      yum: name=ntp state=present
    - name: Ensure NTP is running.
      services: name= ntpd state=started enabled=yes
#+END_SRC

* Module documentation

#+BEGIN_SRC bash :noeval
ansible-doc <module_name>
#e.g.
ansible-doc service
#+END_SRC

Modules to investigate:

- cron
- git

* Config
** ~ansible.cfg~

#+BEGIN_SRC
[ssh_connection]
pipelining = True
#+END_SRC

** Inventory format

#+BEGIN_SRC ini
# Application servers
[app]
192.168.60.4
192.168.60.5

# Database servers
[db]
192.168.60.6

# Group has all the servers
[multi:children]
app
db

[multi:vars]
ansible_ssh_user=ansibleuser
ansible_host=localhost
#+END_SRC
