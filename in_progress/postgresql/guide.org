* Table of Contents :TOC:QUOTE:
#+BEGIN_QUOTE
- [[#create-local-postgres-database-container][Create local postgres database container]]
- [[#interesting-links][Interesting links]]
- [[#joins][Joins]]
- [[#insert-data-from-another-table-with-default-values-postgres][Insert data from another table with default values (postgres)]]
- [[#insertupdate-and-retrieve-the-updated-rows][Insert/Update and retrieve the updated rows]]
- [[#get-constraints-from-postgrespl][Get constraints from Postgrespl]]
- [[#get-currently-running-queries-in-postgresql][Get currently running queries in Postgresql]]
- [[#get-currently-open-connections-in-postgresql][Get currently open connections in Postgresql]]
- [[#abort-queries-in-postgresql][Abort queries in Postgresql]]
- [[#order-by-range-hack-solution][Order by range (hack solution)]]
- [[#find-duplicates][Find duplicates]]
- [[#find-duplicates-multiple-columns][Find duplicates (multiple columns)]]
- [[#give-internal-ranking-to-groups][Give internal ranking to groups]]
- [[#doing-a-where-in-on-multiple-columns-in-postgresql][Doing a ~WHERE IN~ on multiple columns in Postgresql]]
- [[#getting-the-total-number-of-elements-when-using-pagenation][Getting the total number of elements when using pagenation]]
- [[#recursive-calls-in-postgresql][Recursive calls in postgresql]]
- [[#update-values-in-one-table-given-values-in-another-table-postgresql][Update values in one table given values in another table (postgresql)]]
- [[#run-an-where-in-and-also-keep-the-values-not-found-in-the-result][Run an ~WHERE IN~ and also keep the values not found in the result]]
- [[#generate-guid][Generate guid]]
- [[#how-to-update-rows-of-two-tables-that-have-foreign-key-restrictions][How to update rows of two tables that have foreign key restrictions]]
- [[#comparing-timestamps][Comparing timestamps]]
- [[#handle-json][Handle JSON]]
  - [[#convert-json-to-set-of-records][Convert json to set of records]]
- [[#create-tables][Create tables]]
  - [[#primary-keys][Primary keys]]
  - [[#foreign-keys][Foreign keys]]
- [[#query-data][Query data]]
  - [[#aggregate-data][Aggregate data]]
  - [[#perform-a-join-and-aggregate-right-side-as-array-of-json-objects][Perform a join and aggregate right side as array of json objects]]
  - [[#ordering][Ordering]]
- [[#arrays][Arrays]]
- [[#ownerships][Ownerships]]
  - [[#get-owner-of-tables][Get owner of tables]]
- [[#functions-to-investigate][Functions to investigate]]
- [[#ms-sql][MS SQL]]
  - [[#list-all-tables-with-column-names][List all tables with column names]]
#+END_QUOTE

* Create local postgres database container

#+BEGIN_SRC bash :noeval
docker run --rm -p 5432:5432 -e POSTGRES_PASSWORD=password postgres
#+END_SRC

| Description | Value       |
|-------------+-------------|
| Host        | ~localhost~ |
| Port        | ~5432~      |
| Database    | ~postgres~  |
| Username    | ~postgres~  |
| Password    | ~password~  |

* Interesting links

[[http://rachbelaid.com/postgres-full-text-search-is-good-enough/]]
https://niallburkley.com/blog/index-columns-for-like-in-postgres/
http://www.sql-join.com/sql-join-types/
https://www.sitepoint.com/simply-sql-the-from-clause/
https://stackoverflow.com/questions/64016778/better-to-use-serial-primary-key-or-generated-always-as-identity-for-primary-key
https://wiki.postgresql.org/wiki/Don%27t_Do_This#Don.27t_use_serial

* Joins

[[./img/sql_joins.jpg]]

Image found [[https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins][here]]

* Insert data from another table with default values (postgres)

#+BEGIN_SRC sql
INSERT INTO mytable1(col11, col12, col13, col14)
  SELECT col21, col22, 'default_string', 1
  FROM mytable2
  WHERE col23 = 'a_value';
#+END_SRC

* Insert/Update and retrieve the updated rows

#+BEGIN_SRC sql
INSERT INTO mytable(col1, col2, col3)
VALUES ('val1', 'val2', 'val3')
RETURNING
col1, col2, col3, col4, col5;
#+END_SRC

#+BEGIN_SRC sql
UPDATE mytable
SET col1 = 'val1', col2 = 'val2'
WHERE col3 = 'val3'
RETURNING
col1, col2, col3, col4, col5;
#+END_SRC

* Get constraints from Postgrespl

#+BEGIN_SRC sql
-- Table constraints
SELECT *
FROM information_schema.table_constraints;

-- Foreign key constraints
SELECT *
FROM information_schema.referential_constraints;

-- Check constraints
SELECT *
FROM information_schema.check_constraints;
#+END_SRC

* Get currently running queries in Postgresql

#+BEGIN_SRC sql
select pid, usename, state, client_addr, application_name, now()-query_start as "Running time", query
from pg_stat_activity
where state not in ('idle') and usename = 'name' -- Replace name with what?
order by now()-query_start desc; -- Sort by running time
#+END_SRC

* Get currently open connections in Postgresql

#+BEGIN_SRC sql
select client_addr,application_name,usename, pid, state, query_start, now()-query_start as "Running time",query
from pg_stat_activity
where usename = 'name'
order by now()-query_start desc;
#+END_SRC

* Abort queries in Postgresql

I don't know the difference between canceling and killing a query

#+BEGIN_SRC sql
-- cancel a query
SELECT pg_cancel_backend(20475);

-- OR

-- kill query
SELECT pg_terminate_backend(PID);
#+END_SRC

* Order by range (hack solution)

In the example below I want to find the number of people born in a specific
decade where the birth year is found in the ~birth_year~ column.

#+BEGIN_SRC sql
select (birth_year / 10) * 10 as decade, count(*)
from people
group by decade
order by decade asc;
#+END_SRC

If you are grouping some value you can use the following code

#+BEGIN_SRC sql
select (ct / 10 + 1) * 10 as numberOfObjects, count(*) -- Note the "+ 1". I do that because I wanted the upper bound displayed
from (
  select col_1, count(*) ct
  from table_1
  group by col_1
) as foo -- apparently this is needed
group by numberOfObjects
order by numberOfObjects desc;
#+END_SRC

* Find duplicates

#+BEGIN_SRC sql
SELECT
    name, COUNT(*) as ct
FROM
    users
GROUP BY
    name
HAVING
    COUNT(*) > 1
ORDER BY ct DESC;
#+END_SRC

* Find duplicates (multiple columns)

#+BEGIN_SRC sql
SELECT
    name, email, COUNT(*) as ct
FROM
    users
GROUP BY
    name, email
HAVING
    COUNT(*) > 1
ORDER BY ct DESC;
#+END_SRC

* Give internal ranking to groups

The ~GROUP BY~ clause can e good in some cases when you want to check if there
are any duplicate values but in some cases you may want a specific value from a
group. E.g. the entry which was created the latest. Instead of using ~GROUP BY~
you can then use a call like this:

#+BEGIN_SRC sql
select Date, ProductID, Year, Price, row_number() over (partition by ProductID, Year order by Date desc) as RowNum
from YourTable;
#+END_SRC

In the example above the ~ProductID~ and ~Year~ would be your groups and we then
give them a rank by sorting the by the ~Date~ column. Note that all entries from
each group would be returned, but with a column called ~RowNum~ which would
include the internal row number for each group as if it was sorted by ~Date~.
Then we can find the entry with the latest ~Date~ entry with:

#+BEGIN_SRC sql
with cteRowNumber as (
    select Date, ProductID, Year, Price, row_number() over (partition by ProductID, Year order by Date desc) as RowNum
    from YourTable
)
select Date, ProductID, Year, Price
    from cteRowNumber
    where RowNum = 1
#+END_SRC

The ~rank()~ window function is very similar to ~row_number~ but would give two
values with equal ordering the same rank.

See more about window function at [[http://www.postgresqltutorial.com/postgresql-window-function/]]

* Doing a ~WHERE IN~ on multiple columns in Postgresql

#+BEGIN_SRC sql
SELECT *
FROM tbl
WHERE (col0, col1) IN ((val01, val02), (val11, val12), (val21, val22))
#+END_SRC

* Getting the total number of elements when using pagenation

#+BEGIN_SRC sql
SELECT *, count(*) OVER() AS full_count
FROM tbl
WHERE condition
ORDER BY col1
LIMIT 25
OFFSET 50
#+END_SRC

The ~full_count~ column will now contiain the total number of elements (before
applying ~LIMIT~ and ~OFFSET~). Note that the database will have to find all
values when using this and it may affect performance. Postgrespl's documentation
contains more information about [[https://www.postgresql.org/docs/current/tutorial-window.html][window functions]].

* Recursive calls in postgresql

#+BEGIN_SRC sql
with RECURSIVE parent (source_node, target_node, data1, data2) AS (
  SELECT source_node, target_node, data1, data2
  FROM graph_edges
  WHERE source_node = 'aaa'
UNION
  SELECT c.source_node, c.target_node, c.data1, c.data2
  FROM parent p join graph_edges c ON p.target_node = c.source_node
)

SELECT *
FROM parent;
#+END_SRC

* Update values in one table given values in another table (postgresql)

#+BEGIN_SRC sql
UPDATE totable t
SET column1 = f.column1,
  column2 = f.column2,
  column3 = f.column3
FROM fromtable f
WHERE f.id = t.id
AND t.id = 1 -- Optional if you only want it to happen on some rows
#+END_SRC

* Run an ~WHERE IN~ and also keep the values not found in the result

In this case I found it best to create a temporary table and then joining the
tables

#+BEGIN_SRC sql
create temp table temp_table(temp_column VARCHAR primary key); -- Or another type if not VARCHAR is suitable

insert into temp_table(temp_column) -- Add the values you want to search for
VALUES ("1"),
  ("2"),
  ("3"),
  ("4");

-- This step will now keep all values in temp_table even if it's not found in other_table
select *
from temp_table t left join other_table o
  on t.temp_column = o.other_column;

-- When you're done
drop table temp_table;
#+END_SRC

* Generate guid

[[https://til.hashrocket.com/posts/31a5135e19-generate-a-uuid-in-postgresql]]

#+BEGIN_SRC sql
select upper(replace(cast(uuid_generate_v4() as varchar(50)), '-', ''));
#+END_SRC

* How to update rows of two tables that have foreign key restrictions

[[https://stackoverflow.com/questions/34383412/how-to-update-rows-of-two-tables-that-have-foreign-key-restrictions]]

#+BEGIN_SRC sql
with new_a as (
  update a
    set rid = 110
  where rid = 1
)
update b
  set rid = 110
where rid = 1;
#+END_SRC

* Comparing timestamps

To find a timestamp that is greater than the time 2 hours ago you can run

#+BEGIN_SRC sql
select *
from mytable
where mytimestampfield > now() - interval '2 hours'
order by mytimestampfield;
#+END_SRC

~hours~ can of course be replaced with ~days~, ~seconds~ etc.

[[https://stackoverflow.com/questions/27283951/how-to-subtract-days-or-months-from-datetime-using-postgresql-netezza]]

* Handle JSON

https://www.postgresql.org/docs/9.4/functions-json.html

** Convert json to set of records

Builds an arbitrary set of records from a JSON array of objects. As with all
functions returning ~record~, the caller must explicitly define the structure of
the record with an ~AS~ clause.

#+BEGIN_SRC sql
select *
from json_to_record('{"my_string": "myStringValue", "my_int": 5}') as x(
  my_string text,
  my_int int);

select *
from json_to_recordset('[{"a":1,"b":"foo"},{"a":"2","c":"bar"}]') as x(a int, b text);
#+END_SRC

* Create tables
** Primary keys
*** Identity column
**** Add new id column to existing table with data

https://stackoverflow.com/a/49143708

#+BEGIN_SRC sql
CREATE TABLE colors (
    color_name TEXT NOT NULL
);

INSERT INTO colors (color_name)
VALUES ('GREEN'), ('PURPLE');

SELECT *
FROM colors;

ALTER TABLE colors
ADD COLUMN id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY;

SELECT *
FROM colors;

DROP TABLE colors;
#+END_SRC

** Foreign keys
*** The ~MATCH~ keyword

https://dba.stackexchange.com/a/226598

**** Simple Definitions

- ~MATCH FULL~ everything must fully match, or all columns must be ~NULL~.
- ~MATCH SIMPLE~ if one thing is ~NULL~ the constraint is simply ignored.
- ~MATCH PARTIAL~ (not implemented) if one thing is ~NULL~ the fact that not
  everything is ~NULL~ is /partially/ salvaged by doing something sensible for
  the purpose of the constraint.

**** SQL Spec Notes

- ~MATCH SIMPLE~: if at least one referencing column is null, then the row of
  the referencing table passes the constraint check. If all referencing columns
  are not null, then the row passes the constraint check if and only if there is
  a row of the referenced table that matches all the referencing columns.
- ~MATCH PARTIAL~: if all referencing columns are null, then the row of the
  referencing table passes the constraint check. If at least one referencing
  columns is not null, then the row passes the constraint check if and only if
  there is a row of the referenced table that matches all the non-null
  referencing columns.
- ~MATCH FULL~: if all referencing columns are null, then the row of the
  referencing table passes the constraint check. If all referencing columns are
  not null, then the row passes the constraint check if and only if there is a
  row of the referenced table that matches all the referencing columns. If some
  referencing column is null and another referencing column is non-null, then
  the row of the referencing table violates the constraint check.

**** Example

#+BEGIN_SRC sql
CREATE TABLE foo (
  a int,
  b int,
  UNIQUE (a, b)
);

INSERT INTO foo (a, b)
VALUES (1, 1), (2, NULL);

CREATE TABLE t_full (
  a int,
  b int,
  FOREIGN KEY (a, b) REFERENCES foo (a, b) MATCH FULL
);
CREATE TABLE t_simple (
  a int,
  b int,
  FOREIGN KEY (a, b) REFERENCES foo (a, b) MATCH SIMPLE
);

-- Both allowed
INSERT INTO t_full (a, b) VALUES (1, 1);
INSERT INTO t_simple (a, b) VALUES (1, 1);

-- Does not work
INSERT INTO t_full (a, b) VALUES (42, NULL);
-- Works since one value is NULL. The fk constraint is simply ignored
INSERT INTO t_simple (a, b) VALUES (42, NULL);

-- Not allowed either since we can't mix null and nonnull values
INSERT INTO t_full (a, b) VALUES (2, NULL);

-- Allowed
INSERT INTO t_full (a, b) VALUES (NULL, NULL);

DROP TABLE t_simple;
DROP TABLE t_full;
DROP TABLE foo;
#+END_SRC

* Query data
** Aggregate data

https://www.postgresqltutorial.com/postgresql-aggregate-functions/postgresql-string_agg-function/

#+BEGIN_SRC sql
CREATE TABLE foo (
	id int4,
	category TEXT,
	item TEXT
);

INSERT INTO foo (id, category, item)
VALUES
  (1, 'FOOD', 'FISH'),
  (1, 'FOOD', 'MEAT'),
  (1, 'BAR', 'BAZ'),
  (2, 'HOME', 'SOAP'),
  (2, 'HOME', 'BED'),
  (2, 'FOOD', 'MILK');

-- Each column is aggregated separately
SELECT id, array_agg(category), string_agg(item, ',')
FROM foo
GROUP BY id;

SELECT id, array_agg(DISTINCT category), string_agg(DISTINCT item, ',')
FROM foo
GROUP BY id;

SELECT id, array_agg(DISTINCT category ORDER BY category desc), string_agg(DISTINCT item, ',' ORDER BY item desc)
FROM foo
GROUP BY id;

DROP TABLE foo;
#+END_SRC

** Perform a join and aggregate right side as array of json objects

#+BEGIN_SRC sql
SELECT p.*, COALESCE(NULLIF(array_agg(to_jsonb(c) ORDER BY age), '{NULL}'), '{}') AS children
FROM parents p
  LEFT JOIN children c ON p.id = c.parent_id
GROUP BY
  p.id;
#+END_SRC

** Ordering
*** Custom ordering

#+BEGIN_SRC sql
ORDER BY
  CASE
    WHEN id = 8 THEN 1000000
    ELSE id
  END
DESC
#+END_SRC

* Arrays

https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-array/

#+BEGIN_SRC sql
CREATE TABLE contacts (
  id int4 PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  name VARCHAR (100),
  phones TEXT [] -- Array of text created here
);

-- You can use the ARRAY constructor to create an array
INSERT INTO contacts (name, phones)
VALUES('John Doe',ARRAY [ '(408)-589-5846','(408)-589-5555' ]);
-- Or use curly braces. Notice that when using curly braces, you use single
-- quotes ' to wrap the array and double-quotes " to wrap text array items.
INSERT INTO contacts (name, phones)
VALUES('Lily Bush','{"(408)-589-5841"}'),
      ('William Gate','{"(408)-589-5842","(408)-589-58423"}');

-- By default, PostgreSQL uses one-based numbering for array elements. It means
-- the first array element starts with the number 1.
SELECT
  name,
  phones [ 1 ]
FROM
  contacts;

-- Or query for a phone number based on index
SELECT
  name
FROM
  contacts
WHERE
  phones [ 2 ] = '(408)-589-58423';

-- Or look for the number at any position
SELECT
  name,
  phones
FROM
  contacts
WHERE
  '(408)-589-5555' = ANY (phones);

-- Update a phone number
UPDATE contacts
SET phones [2] = '(408)-589-5843'
WHERE ID = 3
RETURNING *;

-- Or replace the whole array
UPDATE
  contacts
SET
  phones = '{"(408)-589-5843"}'
WHERE
  id = 3
RETURNING *;

-- If you want to unnest the array so they end up each on different rows
SELECT
  name,
  unnest(phones)
FROM
  contacts;
#+END_SRC

* Ownerships
** Get owner of tables

#+BEGIN_SRC sql
select *
from pg_catalog.pg_tables p
order by p.schemaname, p.tablename;
#+END_SRC

* Functions to investigate

- row_to_json
- coalesce
- array_to_string
- split_part
- SELECT DISTINCT ON
- ~id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY~

https://stackoverflow.com/questions/49368451/postgres-add-column-with-initially-calculated-values
https://stackoverflow.com/questions/69725970/add-a-column-with-a-default-value-to-an-existing-table-in-postgresql
https://stackoverflow.com/questions/3800551/select-first-row-in-each-group-by-group/7630564#7630564
https://stackoverflow.com/questions/8760419/postgresql-unnest-with-element-number
https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-identity-column/
https://stackoverflow.com/questions/2944499/how-to-add-an-auto-incrementing-primary-key-to-an-existing-table-in-postgresqlx

* MS SQL
** List all tables with column names

https://stackoverflow.com/a/421229

#+BEGIN_SRC sql
SELECT TABLE_SCHEMA ,
       TABLE_NAME ,
       COLUMN_NAME ,
       ORDINAL_POSITION ,
       COLUMN_DEFAULT ,
       DATA_TYPE ,
       CHARACTER_MAXIMUM_LENGTH ,
       NUMERIC_PRECISION ,
       NUMERIC_PRECISION_RADIX ,
       NUMERIC_SCALE ,
       DATETIME_PRECISION
FROM   INFORMATION_SCHEMA.COLUMNS;
#+END_SRC
